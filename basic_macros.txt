Macro variables


Global Macro variable

proc print data = sashelp.cars;
where make = 'Audi' and type = 'Sports' ;
 TITLE "Sales as of &SYSDAY &SYSDATE";
run;

Local Macro variable

Syntax
The local variables are declared with below syntax.

% LET (Macro Variable Name) = Value;



Macro Programs

Syntax
The local variables are declared with below syntax.

# Creating a Macro program.
%MACRO (Param1, Param2,….Paramn);

Macro Statements;

%MEND;

# Calling a Macro program.
%MacroName (Value1, Value2,…..Valuen);


Example

%MACRO show_result(make_ , type_);
proc print data = sashelp.cars;
where make = "&make_" and type = "&type_" ;
TITLE "Sales as of &SYSDAY &SYSDATE";
run;
%MEND;

%show_result(BMW,SUV);



Commonly Used Macros


Macro %PUT

This macro statement writes text or macro variable information to the SAS log. In the below example the value of the variable 'today' is written to the program log.

data _null_;
CALL SYMPUT ('today',
TRIM(PUT("&sysdate"d,worddate22.)));
run;
%put &today;



Macro %RETURN
Execution of this macro causes normal termination of the currently executing macro when certain condition evaluates to be true. In the below example when the value of the variable "val" becomes 10, the macro terminates else it contnues.

%macro check_condition(val);
   %if &val = 10 %then %return;

    data p;
       x=34.2;
    run;  

%mend check_condition;  

%check_condition(11)  ;



Macro %END
This macro definition contains a %DO %WHILE loop that ends, as required, with a %END statement. In the below example the macro named test takes a user input and runs the DO loop using this input value. The end of DO loop is achieved through the %end statement while the end of macro is achieved through %mend statement.

%macro test(finish);
   %let i=1;
   %do %while (&i <&finish);
      %put the value of i is &i;
      %let i=%eval(&i+1);
   %end;
%mend test;
%test(5)


